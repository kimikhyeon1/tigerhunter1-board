Index: TigerCave/src/main/java/com/sparta/tigercave/jwt/JwtUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sparta.tigercave.jwt;\r\n\r\nimport com.sparta.tigercave.entity.UsersRoleEnum;\r\nimport com.sparta.tigercave.exception.CustomException;\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jws;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.tomcat.util.http.parser.Authorization;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.util.StringUtils;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.security.Key;\r\nimport java.util.Base64;\r\nimport java.util.Date;\r\n\r\nimport static com.sparta.tigercave.exception.ErrorCode.INVALID_TOKEN;\r\n\r\n@Slf4j              // SLF4J는 Java의 로깅 모듈들의 추상체 -> 로그를 찍어주기 위함\r\n@Component          //개발자가 직접 작성한 class를 bean으로 등록하려고 할때 사용하는 어노테이션\r\n@RequiredArgsConstructor\r\npublic class JwtUtil {\r\n\r\n    private final UserDetailsService userDetailsService;\r\n\r\n    @Value(\"${jwt.response.header}\")\r\n    public static final String AUTHORIZATION_HEADER = \"Authorization\";\r\n    @Value(\"${jwt.token.prefix}\")\r\n    private static final String BEARER_PREFIX = \"Bearer \";\r\n    @Value(\"${jwt.secret.key}\")\r\n    private String secretKey;\r\n    private static final long TOKEN_TIME = 60 * 60 * 1000L;\r\n\r\n    private Key key;\r\n\r\n    private final SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;\r\n\r\n    //객체 초기화, secretKey를 Base64로 인코딩한다.\r\n    @PostConstruct\r\n    protected void init(){\r\n        byte[] bytes = Base64.getDecoder().decode(secretKey);\r\n        key = Keys.hmacShaKeyFor(bytes);\r\n    }\r\n\r\n    //JWT토큰 생성\r\n    public String createToken(String username, UsersRoleEnum role){\r\n\r\n        Claims claims = Jwts.claims().setSubject(username);\r\n\r\n        //jwt payload에 저장되는 정보 단위, 보통 여기서 user를 식별하는 값을 넣는다.\r\n        claims.put(\"role\", role);   //ket/value 값으로 저장됨\r\n        Date now = new Date();\r\n        return BEARER_PREFIX+\r\n                Jwts.builder()\r\n                .setClaims(claims)  //정보저장\r\n                .setIssuedAt(now)   //토큰 발행 시간 정보\r\n                .setExpiration(new Date(now.getTime() + TOKEN_TIME))    //토큰 만료 시간\r\n                .signWith(signatureAlgorithm, key)    //사용할 암호화 알고리즘과 signature에 들어갈 secret값 세팅\r\n                .compact();     //토큰 생성\r\n    }\r\n\r\n    //JWT토큰 유효성 검사 , 만료일자 확인\r\n    public boolean validateToken(String token){\r\n        try{\r\n            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);\r\n            return true;\r\n        }catch (Exception e){\r\n            new CustomException(INVALID_TOKEN);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //header 토큰 가져오기\r\n    public String resolveToken(HttpServletRequest request){\r\n        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);\r\n        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(BEARER_PREFIX)) {\r\n            return bearerToken.substring(7);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //토큰에서 회원정보 추출\r\n    public Claims getUserFromToken(String token){\r\n        return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();\r\n    }\r\n\r\n    //인증객체 생성\r\n    public Authentication createAuthentication(String username){\r\n        UserDetails userDetails = userDetailsService.loadUserByUsername(username);\r\n        return new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TigerCave/src/main/java/com/sparta/tigercave/jwt/JwtUtil.java b/TigerCave/src/main/java/com/sparta/tigercave/jwt/JwtUtil.java
--- a/TigerCave/src/main/java/com/sparta/tigercave/jwt/JwtUtil.java	(revision 02776a0790565c922a4bcde2b33cc08d04b8ea0b)
+++ b/TigerCave/src/main/java/com/sparta/tigercave/jwt/JwtUtil.java	(date 1672727023777)
@@ -3,13 +3,11 @@
 import com.sparta.tigercave.entity.UsersRoleEnum;
 import com.sparta.tigercave.exception.CustomException;
 import io.jsonwebtoken.Claims;
-import io.jsonwebtoken.Jws;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.SignatureAlgorithm;
 import io.jsonwebtoken.security.Keys;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.tomcat.util.http.parser.Authorization;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
